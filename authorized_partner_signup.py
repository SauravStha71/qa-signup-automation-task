import subprocess
import sys
import time
import random

def install_packages():
    packages = ['selenium', 'webdriver-manager']
    for package in packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])

install_packages()

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys

print("üöÄ Starting Fresh Agency Registration...")

class FreshAgencySignup:
    def __init__(self):
        chrome_options = Options()
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--start-maximized")
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        self.wait = WebDriverWait(self.driver, 20)
    
    def debug_form_fields(self):
        """Debug method to see all available form fields"""
        print("\nüîç DEBUG: Available Form Fields")
        all_inputs = self.driver.find_elements(By.TAG_NAME, "input")
        
        for i, inp in enumerate(all_inputs):
            print(f"Field {i+1}:")
            print(f"  Type: {inp.get_attribute('type')}")
            print(f"  Name: {inp.get_attribute('name')}")
            print(f"  ID: {inp.get_attribute('id')}")
            print(f"  Placeholder: {inp.get_attribute('placeholder')}")
            print(f"  Value: {inp.get_attribute('value')}")
            print("---")
    
    def wait_for_element_visible(self, by, value, timeout=10):
        """Wait for element to be visible and clickable"""
        return WebDriverWait(self.driver, timeout).until(
            EC.element_to_be_clickable((by, value))
        )
    
    def clear_and_type_slowly(self, element, text, field_name=""):
        """Clear field thoroughly and type text slowly"""
        try:
            # Scroll into view
            self.driver.execute_script("arguments[0].scrollIntoView();", element)
            time.sleep(1)
            
            # Click to focus
            element.click()
            time.sleep(0.5)
            
            # Multiple clearing methods
            element.clear()
            time.sleep(0.5)
            element.send_keys(Keys.CONTROL + "a")
            time.sleep(0.5)
            element.send_keys(Keys.DELETE)
            time.sleep(0.5)
            
            # Type slowly character by character
            for char in text:
                element.send_keys(char)
                time.sleep(0.03)  # Slow typing to ensure proper input
            
            # Verify the entered value
            actual_value = element.get_attribute('value')
            if actual_value != text:
                print(f"‚ö†Ô∏è  {field_name} field value mismatch: Expected '{text}', got '{actual_value}'")
                # Retry if mismatch
                element.clear()
                time.sleep(0.5)
                for char in text:
                    element.send_keys(char)
                    time.sleep(0.05)
            else:
                print(f"‚úÖ {field_name}: {text}")
                
            return True
        except Exception as e:
            print(f"‚ùå Error in clear_and_type_slowly for {field_name}: {e}")
            return False

    def handle_terms_page(self):
        """Handle the terms page"""
        print("\nüìÑ STEP 1: Terms and Conditions Page")
        
        try:
            time.sleep(5)
            
            checkbox = self.wait.until(EC.element_to_be_clickable((By.ID, "remember")))
            self.driver.execute_script("arguments[0].scrollIntoView();", checkbox)
            time.sleep(1)
            
            if checkbox.get_attribute("data-state") != "checked":
                self.driver.execute_script("arguments[0].click();", checkbox)
                print("‚úÖ Terms checkbox checked")
            
            continue_button = self.driver.find_element(By.XPATH, "//a/button[contains(text(), 'Continue')]")
            continue_button.click()
            print("‚úÖ Continue button clicked")
            time.sleep(5)
            return True
            
        except Exception as e:
            print(f"‚ùå Error on terms page: {e}")
            return False

    def fill_personal_details_carefully(self):
        """Fill personal details one field at a time with careful targeting"""
        print("\nüë§ STEP 2: Personal Details Page")
        
        try:
            # Wait for page to fully load
            time.sleep(5)
            
            # DEBUG: See what fields are available
            self.debug_form_fields()
            
            print("üîç Scanning for form fields...")
            
            # FILL FIRST NAME
            print("üìù Filling First Name...")
            try:
                first_name_selectors = [
                    "//input[@placeholder='Enter Your First Name']",
                    "//input[contains(@placeholder, 'First Name')]",
                    "//input[contains(@name, 'first')]",
                    "//input[contains(@id, 'first')]"
                ]
                
                first_name_field = None
                for selector in first_name_selectors:
                    try:
                        first_name_field = self.driver.find_element(By.XPATH, selector)
                        break
                    except:
                        continue
                
                if first_name_field:
                    self.clear_and_type_slowly(first_name_field, "Demo", "First Name")
                else:
                    print("‚ùå Could not locate first name field")
                    
            except Exception as e:
                print(f"‚ùå First Name error: {e}")
            
            time.sleep(1)
            
            # FILL LAST NAME
            print("üìù Filling Last Name...")
            try:
                last_name_selectors = [
                    "//input[@placeholder='Enter Your Last Name']",
                    "//input[contains(@placeholder, 'Last Name')]",
                    "//input[contains(@name, 'last')]",
                    "//input[contains(@id, 'last')]"
                ]
                
                last_name_field = None
                for selector in last_name_selectors:
                    try:
                        last_name_field = self.driver.find_element(By.XPATH, selector)
                        break
                    except:
                        continue
                
                if last_name_field:
                    self.clear_and_type_slowly(last_name_field, "Account", "Last Name")
                else:
                    print("‚ùå Could not locate last name field")
                    
            except Exception as e:
                print(f"‚ùå Last Name error: {e}")
            
            time.sleep(1)
            
            # FILL EMAIL - CAREFUL TARGETING
            print("üìù Filling Email...")
            try:
                email_selectors = [
                    "//input[@type='email']",
                    "//input[contains(@placeholder, 'Email')]",
                    "//input[contains(@name, 'email')]",
                    "//input[@id='email']",
                    "//input[@placeholder='Enter Your Email Address']"
                ]
                
                email_field = None
                for selector in email_selectors:
                    try:
                        email_field = self.driver.find_element(By.XPATH, selector)
                        break
                    except:
                        continue
                
                if email_field:
                    self.email = f"demo{random.randint(1000,9999)}@test.com"
                    self.clear_and_type_slowly(email_field, self.email, "Email")
                else:
                    print("‚ùå Could not locate email field")
                    
            except Exception as e:
                print(f"‚ùå Email error: {e}")
            
            time.sleep(1)
            
            # FILL PHONE - ENHANCED TARGETING
            print("üìù Filling Phone Number...")
            try:
                phone_selectors = [
                    "//input[@type='tel']",
                    "//input[contains(@placeholder, 'Phone')]",
                    "//input[contains(@name, 'phone')]",
                    "//input[contains(@id, 'phone')]",
                    "//input[contains(@placeholder, '000-00000000')]"
                ]
                
                phone_field = None
                for selector in phone_selectors:
                    try:
                        phone_field = self.driver.find_element(By.XPATH, selector)
                        break
                    except:
                        continue
                
                if not phone_field:
                    # Fallback: look for any input that might be phone
                    all_inputs = self.driver.find_elements(By.TAG_NAME, "input")
                    for inp in all_inputs:
                        placeholder = inp.get_attribute("placeholder") or ""
                        name = inp.get_attribute("name") or ""
                        field_type = inp.get_attribute("type") or ""
                        
                        if (field_type == "tel" or 
                            "phone" in placeholder.lower() or 
                            "phone" in name.lower() or
                            "000-" in placeholder):
                            phone_field = inp
                            break
                
                if phone_field:
                    self.clear_and_type_slowly(phone_field, "9803890957", "Phone")
                else:
                    print("‚ùå Could not locate phone field")
                    
            except Exception as e:
                print(f"‚ùå Phone error: {e}")
            
            time.sleep(1)
            
            # FILL PASSWORD FIELDS
            print("üìù Filling Passwords...")
            password_fields = self.driver.find_elements(By.XPATH, "//input[@type='password']")
            print(f"üîë Found {len(password_fields)} password fields")
            
            if len(password_fields) >= 1:
                try:
                    password1 = password_fields[0]
                    self.password = "SecurePassword123!"
                    self.clear_and_type_slowly(password1, self.password, "Password")
                except Exception as e:
                    print(f"‚ùå Password error: {e}")
            
            if len(password_fields) >= 2:
                try:
                    password2 = password_fields[1]
                    self.clear_and_type_slowly(password2, self.password, "Confirm Password")
                except Exception as e:
                    print(f"‚ùå Confirm Password error: {e}")
            
            time.sleep(2)
            
            # Click Next button
            print("üîÑ Clicking Next button...")
            try:
                next_btn = self.driver.find_element(By.XPATH, "//button[contains(text(), 'Next')]")
                next_btn.click()
                print("‚úÖ Next button clicked")
                time.sleep(5)
                return True
            except Exception as e:
                print(f"‚ùå Next button error: {e}")
                return False
            
        except Exception as e:
            print(f"‚ùå Error in personal details: {e}")
            return False

    def handle_agency_details(self):
        """Handle agency details - ONLY fill address here"""
        print("\nüè¢ STEP 3: Agency Details")
        
        try:
            time.sleep(5)
            
            # DEBUG current page fields
            self.debug_form_fields()
            
            # ONLY fill address on agency page, not personal page
            print("üìù Filling Agency Address...")
            try:
                address_selectors = [
                    "//input[contains(@placeholder, 'Address')]",
                    "//input[contains(@name, 'address')]",
                    "//input[contains(@id, 'address')]"
                ]
                
                address_field = None
                for selector in address_selectors:
                    try:
                        address_field = self.driver.find_element(By.XPATH, selector)
                        break
                    except:
                        continue
                
                if address_field:
                    self.clear_and_type_slowly(address_field, "123 Business Street", "Address")
                else:
                    print("‚ö†Ô∏è Address field not found on agency page")
            except Exception as e:
                print(f"‚ö†Ô∏è Address field error: {e}")
            
            # Click Next
            if self.click_next_button():
                time.sleep(3)
                return True
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è Agency details: {e}")
            return self.click_next_button()

    def handle_professional_experience(self):
        """Handle professional experience"""
        print("\nüíº STEP 4: Professional Experience")
        
        try:
            time.sleep(5)
            
            # Fill experience
            try:
                experience_selectors = [
                    "//input[contains(@placeholder, 'Experience')]",
                    "//input[contains(@name, 'experience')]",
                    "//textarea[contains(@placeholder, 'Experience')]"
                ]
                
                experience_field = None
                for selector in experience_selectors:
                    try:
                        experience_field = self.driver.find_element(By.XPATH, selector)
                        break
                    except:
                        continue
                
                if experience_field:
                    self.clear_and_type_slowly(experience_field, "5 years", "Experience")
                else:
                    print("‚ö†Ô∏è Experience field not found")
            except Exception as e:
                print(f"‚ö†Ô∏è Experience field error: {e}")
            
            if self.click_next_button():
                time.sleep(3)
                return True
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è Professional experience: {e}")
            return self.click_next_button()

    def handle_final_submission(self):
        """Handle final submission"""
        print("\n‚úÖ STEP 5: Final Submission")
        
        try:
            time.sleep(5)
            
            # Final submit
            final_buttons = [
                "//button[contains(text(), 'Complete Registration')]",
                "//button[contains(text(), 'Submit')]",
                "//button[contains(text(), 'Finish')]",
                "//button[contains(text(), 'Register')]"
            ]
            
            for button_text in final_buttons:
                try:
                    button = self.driver.find_element(By.XPATH, button_text)
                    button.click()
                    print(f"‚úÖ Final submission: {button_text}")
                    time.sleep(5)
                    return True
                except:
                    continue
            
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Final submission: {e}")
            return True

    def click_next_button(self):
        """Click next/continue button"""
        next_selectors = [
            "//button[contains(text(), 'Next')]",
            "//button[contains(text(), 'Continue')]",
            "//button[@type='submit']",
            "//input[@type='submit']"
        ]
        
        for selector in next_selectors:
            try:
                button = self.driver.find_element(By.XPATH, selector)
                button.click()
                print("‚úÖ Next button clicked")
                return True
            except:
                continue
        
        print("‚ùå No next button found")
        return False

    def run_complete_registration(self):
        """Run complete registration"""
        try:
            print("üåê Loading website...")
            self.driver.get("https://authorized-partner.netlify.app/login")
            time.sleep(3)
            
            print("üîó Clicking Sign Up link...")
            signup_link = self.wait.until(EC.element_to_be_clickable((By.XPATH, "//a[contains(text(), 'Sign Up')]")))
            signup_link.click()
            time.sleep(3)
            
            # Execute steps
            steps = [
                self.handle_terms_page,
                self.fill_personal_details_carefully,
                self.handle_agency_details,
                self.handle_professional_experience,
                self.handle_final_submission
            ]
            
            for step_number, step_function in enumerate(steps, 1):
                print(f"\n{'='*50}")
                print(f"PROGRESS: Step {step_number}/5")
                print(f"{'='*50}")
                success = step_function()
                if not success and step_number > 1:  # Allow terms page to fail but continue
                    print(f"‚ö†Ô∏è Step {step_number} had issues, but continuing...")
            
            print(f"\n{'='*60}")
            print("‚úÖ REGISTRATION PROCESS COMPLETED!")
            print(f"{'='*60}")
            print("‚è≥ Browser will close in 30 seconds...")
            time.sleep(30)
            
        except Exception as e:
            print(f"‚ùå Critical error: {e}")
            import traceback
            traceback.print_exc()
            time.sleep(30)
        finally:
            self.driver.quit()

# Run the registration
if __name__ == "__main__":
    print("üöÄ CORRECTED SCRIPT - ENHANCED FIELD TARGETING")
    print("Key improvements:")
    print("1. ‚úÖ Multiple field selectors for each input type")
    print("2. ‚úÖ Enhanced field clearing and slow typing")
    print("3. ‚úÖ Field value verification after entry")
    print("4. ‚úÖ Debug mode to see all available fields")
    print("5. ‚úÖ Separate address filling only on agency page")
    print("6. ‚úÖ Better error handling and continuation")
    print()
    
    registration = FreshAgencySignup()
    registration.run_complete_registration()